{"ast":null,"code":"import _regeneratorRuntime from \"/home/bd2-system/Desktop/esi/website-vuejs/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/bd2-system/Desktop/esi/website-vuejs/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/home/bd2-system/Desktop/esi/website-vuejs/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport { mapState, mapActions } from 'vuex';\nexport default {\n  name: 'user-info',\n  data: function data() {\n    return {\n      email: '',\n      description: '',\n      oldPassword: '',\n      newPassword: '',\n      newPasswordConfirm: '',\n      isEditting: null\n    };\n  },\n  computed: _objectSpread({\n    isUser: function isUser() {\n      return this.username === this.userInfo.username;\n    }\n  }, mapState({\n    userInfo: function userInfo(state) {\n      return state.auth.userInfo;\n    },\n    username: function username(state) {\n      return state.auth.username;\n    },\n    pending: function pending(state) {\n      return state.auth.pending;\n    }\n  })),\n  methods: _objectSpread({\n    openEdit: function openEdit(field) {\n      // Populate field value before openning\n      if (field !== 'password' && field === 'description' !== null) {\n        this[field] = this.userInfo[field];\n      }\n      this.isEditting = field;\n    },\n    sendEdit: function sendEdit() {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              data = {\n                username: _this.userInfo.username\n              };\n              if (!(_this.isEditting === 'email')) {\n                _context.next = 5;\n                break;\n              }\n              data.email = _this.email;\n              _context.next = 17;\n              break;\n            case 5:\n              if (!(_this.isEditting === 'description')) {\n                _context.next = 9;\n                break;\n              }\n              data.description = _this.description;\n              _context.next = 17;\n              break;\n            case 9:\n              if (!(_this.isEditting === 'password')) {\n                _context.next = 17;\n                break;\n              }\n              if (!(_this.newPassword !== _this.newPasswordConfirm)) {\n                _context.next = 15;\n                break;\n              }\n              _this.addError('Different passwords');\n              return _context.abrupt(\"return\", false);\n            case 15:\n              data.password = _this.oldPassword;\n              data['new_password'] = _this.newPassword;\n            case 17:\n              _context.next = 19;\n              return _this.sendEditMyUserInfo(data);\n            case 19:\n              _this.isEditting = null;\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    }\n  }, mapActions(['sendEditMyUserInfo', 'addError']))\n};","map":{"version":3,"names":["mapState","mapActions","name","data","email","description","oldPassword","newPassword","newPasswordConfirm","isEditting","computed","_objectSpread","isUser","username","userInfo","state","auth","pending","methods","openEdit","field","sendEdit","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","addError","abrupt","password","sendEditMyUserInfo","stop"],"sources":["src/components/user/UserInfo.vue"],"sourcesContent":["<template>\n  <div v-if=\"userInfo\">\n    <div class=\"max-w-sm bg-white rounded-lg border border-gray-200 shadow-md\">\n      <div class=\"flex flex-col pt-10 px-5 pb-14\">\n        \n        <h2 class=\"text-neutral-base text-2xl font-bold\">{{ userInfo.username }}</h2>\n        <div class=\"w-full\">\n          <!-- Description -->\n          <div v-if=\"isEditting !== 'description'\" class=\"text-neutral-light text-base mt-2\">\n            <p v-if=\"userInfo.description\">\n              {{ userInfo.description }}\n            </p>\n            <p v-else>\n              {{ $t('No user description') }}\n            </p>\n            <button \n              v-if=\"isUser && !isEditting\"\n              class=\"self-center mt-3 py-2 px-4 text-sm font-medium text-center text-white bg-secondary-light rounded-lg hover:bg-secondary-base\"\n              @click=\"openEdit('description')\"\n            >\n              {{ $t('edit') }}\n            </button>\n          </div>\n          <!-- Edit Description -->\n          <div v-else class=\"mt-2\">\n            <div class=\"form-group form flex flex-col\">\n              <label class=\"sr-only\" for=\"user-edit-description\">\n                {{ $t('Description') }}\n              </label>\n              <textarea \n                rows=\"4\" \n                class=\"form-control block p-2.5 w-full text-sm text-neutral-base bg-gray-50 rounded-lg border border-gray-300 focus:ring-primary-base focus:border-primary-base\"\n                id=\"user-edit-description\"\n                maxlength=\"500\"\n                v-model=\"description\"\n                :placeholder=\"$t('Description')\"\n              />\n              <div class=\"control-buttons\">\n                <button-spinner\n                  type=\"submit\"\n                  :disabled=\"!description.length\"\n                  :condition=\"pending.sendEdit\"\n                  @click.prevent.native=\"sendEdit\"\n                  class=\"cursor-pointer self-center mt-3 py-2 px-3 text-sm font-medium text-center text-white bg-secondary-light rounded-lg hover:bg-secondary-base\"\n                >\n                  {{ $t('Save') }}\n                </button-spinner>\n                <button \n                  class=\"self-center mt-3 py-2 px-3 text-sm font-medium text-center text-secondary-light border border-secondary-light rounded-lg hover:bg-secondary-base hover:text-white\"\n                  @click.prevent=\"isEditting = null\"\n                >\n                  {{ $t('Cancel') }}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"top-bar bottom-bar private-info mt-8 pt-3 border-t border-gray-150 w-full\" v-if=\"isUser\">\n            <h3 class=\"text-neutral-base font-semibold text-lg mt-2\">Informações pessoais</h3>\n            <h4 class=\"text-neutral-light text-sm mb-2\">Elas estão visíveis apenas para você</h4>\n\n            <!-- Email -->\n            <div v-if=\"isEditting !== 'email'\">\n                <span class=\"text-neutral-base font-medium\"><b>{{ $t('Email') }}:</b> {{ userInfo.email }}</span>\n                <button\n                  v-if=\"!isEditting\"\n                  @click=\"openEdit('email')\"\n                  class=\"underline text-secondary-base text-sm\">\n                  {{ $t('edit') }}\n                </button>\n            </div>\n            <!-- Edit Email -->\n            <div v-else>\n                <div class=\"form-group form\">\n                    <label class=\"sr-only\"\n                            for=\"user-edit-email\">\n                        {{ $t('E-mail') }}\n                    </label>\n                    <input type=\"text\"\n                          class=\"bg-gray-50 border border-gray-300 text-neutral-base text-sm rounded-lg focus:ring-primary-dark focus:border-primary-dark block w-full p-2.5\" \n                          id=\"user-edit-email\"\n                          v-model=\"email\"\n                          :placeholder=\"$t('E-mail')\">\n                    <div class=\"control-buttons\">\n                        <button-spinner type=\"submit\"\n                          :condition=\"pending.sendEdit\"\n                          @click.prevent.native=\"sendEdit\"\n                          class=\"cursor-pointer self-center mt-3 py-2 px-3 text-sm font-medium text-center text-white bg-secondary-light rounded-lg hover:bg-secondary-base\"\n                        >\n                            {{ $t('Save') }}\n                        </button-spinner>\n                        <button\n                          class=\"self-center mt-3 py-2 px-3 text-sm font-medium text-center text-secondary-light border border-secondary-light rounded-lg hover:bg-secondary-base hover:text-white\"\n                          @click.prevent=\"isEditting = null\"\n                        >\n                            {{ $t('Cancel') }}\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Password -->\n            <div v-if=\"isEditting !== 'password'\">\n                <span class=\"text-neutral-base font-medium\"><b>{{ $t('Password') }}</b></span>\n                <button\n                  v-if=\"!isEditting\"\n                  @click=\"openEdit('password')\"\n                  class=\"underline text-secondary-base text-sm\"\n                >\n                  {{ $t('edit') }}\n                </button>\n            </div>\n\n            <!-- Edit Password -->\n            <div v-else>\n                <form class=\"form pessoa-edit-password-form\">\n                    <div class=\"form-group form-inline\">\n                        <label class=\"sr-only\"\n                                for=\"user-edit-curr-password\">\n                            {{ $t('Current password') }}\n                        </label>\n                        <input type=\"password\"\n                            class=\"mt-2 bg-gray-50 border border-gray-300 text-neutral-base text-sm rounded-lg focus:ring-primary-dark focus:border-primary-dark block w-full p-2.5\" \n                            id=\"user-edit-curr-password\"\n                            v-model=\"oldPassword\"\n                            :placeholder=\"$t('Current password')\">\n                    </div>\n\n                    <div class=\"form-group form-inline\">\n                        <label class=\"sr-only\"\n                                for=\"user-edit-new-password\">\n                            {{ $t('New password') }}\n                        </label>\n                        <input type=\"password\"\n                                class=\"mt-2 bg-gray-50 border border-gray-300 text-neutral-base text-sm rounded-lg focus:ring-primary-dark focus:border-primary-dark block w-full p-2.5\" \n                                id=\"user-edit-new-password\"\n                            v-model=\"newPassword\"\n                                :placeholder=\"$t('New password')\">\n                    </div>\n\n                    <div class=\"form-group form-inline\">\n                        <label class=\"sr-only\"\n                                for=\"user-edit-confirm-password\">\n                            {{ $t(\"Confirm new password\") }}\n                        </label>\n                        <input type=\"password\"\n                                class=\"mt-2 bg-gray-50 border border-gray-300 text-neutral-base text-sm rounded-lg focus:ring-primary-dark focus:border-primary-dark block w-full p-2.5\" \n                                id=\"user-edit-confirm-password\"\n                            v-model=\"newPasswordConfirm\"\n                                :placeholder=\"$t('Confirm new password')\">\n                    </div>\n\n                    <button-spinner type=\"submit\"\n                          :condition=\"pending.sendEdit\"\n                          @click.prevent.native=\"sendEdit\"\n                          class=\"cursor-pointer self-center mt-3 py-2 px-3 text-sm font-medium text-center text-white bg-secondary-light rounded-lg hover:bg-secondary-base\"\n                          >\n                        {{ $t('Save') }}\n                    </button-spinner>\n                    <button \n                      class=\"self-center mt-3 py-2 px-3 text-sm font-medium text-center text-secondary-light border border-secondary-light rounded-lg hover:bg-secondary-base hover:text-white\"\n                      @click.prevent=\"isEditting = null\"\n                    >\n                        {{ $t('Cancel') }}\n                    </button>\n                </form>\n            </div>\n        </div>\n      </div>\n    </div>\n\n    \n\n  </div>\n</template>\n\n<script>\nimport { mapState, mapActions } from 'vuex'\nexport default {\n  name: 'user-info',\n  data () {\n    return {\n      email: '',\n      description: '',\n      oldPassword: '',\n      newPassword: '',\n      newPasswordConfirm: '',\n      isEditting: null\n    }\n  },\n  computed: {\n    isUser () {\n      return this.username === this.userInfo.username\n    },\n    ...mapState({\n      userInfo: state => state.auth.userInfo,\n      username: state => state.auth.username,\n      pending: state => state.auth.pending\n    })\n  },\n  methods: {\n    openEdit (field) {\n      // Populate field value before openning\n      if (field !== 'password' && ((field === 'description') !== null)) {\n        this[field] = this.userInfo[field]\n      }\n      this.isEditting = field\n    },\n    async sendEdit () {\n      let data = { username: this.userInfo.username }\n      if (this.isEditting === 'email') {\n        data.email = this.email\n      } else if (this.isEditting === 'description') {\n        data.description = this.description\n      } else if (this.isEditting === 'password') {\n        // Trying to change password\n        if (this.newPassword !== this.newPasswordConfirm) {\n          this.addError('Different passwords')\n          return false\n        } else {\n          data.password = this.oldPassword\n          data['new_password'] = this.newPassword\n        }\n      }\n      await this.sendEditMyUserInfo(data)\n      this.isEditting = null\n    },\n    ...mapActions(['sendEditMyUserInfo', 'addError'])\n  }\n}\n</script>\n"],"mappings":";;;;;AAiLA,SAAAA,QAAA,EAAAC,UAAA;AACA;EACAC,IAAA;EACAC,IAAA,WAAAA,KAAA;IACA;MACAC,KAAA;MACAC,WAAA;MACAC,WAAA;MACAC,WAAA;MACAC,kBAAA;MACAC,UAAA;IACA;EACA;EACAC,QAAA,EAAAC,aAAA;IACAC,MAAA,WAAAA,OAAA;MACA,YAAAC,QAAA,UAAAC,QAAA,CAAAD,QAAA;IACA;EAAA,GACAb,QAAA;IACAc,QAAA,WAAAA,SAAAC,KAAA;MAAA,OAAAA,KAAA,CAAAC,IAAA,CAAAF,QAAA;IAAA;IACAD,QAAA,WAAAA,SAAAE,KAAA;MAAA,OAAAA,KAAA,CAAAC,IAAA,CAAAH,QAAA;IAAA;IACAI,OAAA,WAAAA,QAAAF,KAAA;MAAA,OAAAA,KAAA,CAAAC,IAAA,CAAAC,OAAA;IAAA;EACA,GACA;EACAC,OAAA,EAAAP,aAAA;IACAQ,QAAA,WAAAA,SAAAC,KAAA;MACA;MACA,IAAAA,KAAA,mBAAAA,KAAA;QACA,KAAAA,KAAA,SAAAN,QAAA,CAAAM,KAAA;MACA;MACA,KAAAX,UAAA,GAAAW,KAAA;IACA;IACAC,QAAA,WAAAA,SAAA;MAAA,IAAAC,KAAA;MAAA,OAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,UAAAC,QAAA;QAAA,IAAAvB,IAAA;QAAA,OAAAqB,mBAAA,GAAAG,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cACA5B,IAAA;gBAAAU,QAAA,EAAAS,KAAA,CAAAR,QAAA,CAAAD;cAAA;cAAA,MACAS,KAAA,CAAAb,UAAA;gBAAAoB,QAAA,CAAAE,IAAA;gBAAA;cAAA;cACA5B,IAAA,CAAAC,KAAA,GAAAkB,KAAA,CAAAlB,KAAA;cAAAyB,QAAA,CAAAE,IAAA;cAAA;YAAA;cAAA,MACAT,KAAA,CAAAb,UAAA;gBAAAoB,QAAA,CAAAE,IAAA;gBAAA;cAAA;cACA5B,IAAA,CAAAE,WAAA,GAAAiB,KAAA,CAAAjB,WAAA;cAAAwB,QAAA,CAAAE,IAAA;cAAA;YAAA;cAAA,MACAT,KAAA,CAAAb,UAAA;gBAAAoB,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAA,MAEAT,KAAA,CAAAf,WAAA,KAAAe,KAAA,CAAAd,kBAAA;gBAAAqB,QAAA,CAAAE,IAAA;gBAAA;cAAA;cACAT,KAAA,CAAAU,QAAA;cAAA,OAAAH,QAAA,CAAAI,MAAA,WACA;YAAA;cAEA9B,IAAA,CAAA+B,QAAA,GAAAZ,KAAA,CAAAhB,WAAA;cACAH,IAAA,mBAAAmB,KAAA,CAAAf,WAAA;YAAA;cAAAsB,QAAA,CAAAE,IAAA;cAAA,OAGAT,KAAA,CAAAa,kBAAA,CAAAhC,IAAA;YAAA;cACAmB,KAAA,CAAAb,UAAA;YAAA;YAAA;cAAA,OAAAoB,QAAA,CAAAO,IAAA;UAAA;QAAA,GAAAV,OAAA;MAAA;IACA;EAAA,GACAzB,UAAA;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}