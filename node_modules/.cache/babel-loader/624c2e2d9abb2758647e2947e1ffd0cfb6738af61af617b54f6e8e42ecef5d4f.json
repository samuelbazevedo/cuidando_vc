{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/bd2-system/Desktop/esi/website-vuejs/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/home/bd2-system/Desktop/esi/website-vuejs/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { mapState } from 'vuex';\nimport { format } from '@/utils';\nimport HorBar from '@/components/chart/HorBar.vue';\nimport LabeledDoughnut from '@/components/chart/LabeledDoughnut.vue';\nexport default {\n  name: 'year-charts',\n  components: {\n    HorBar: HorBar,\n    LabeledDoughnut: LabeledDoughnut\n  },\n  // mounted () {\n  //   this.getYearInfo({ params: { year: this.year } })\n  // },\n  computed: _objectSpread({\n    perMapped: function perMapped() {\n      return Math.round(this.yearInfo.rows.mapped / this.yearInfo.rows.total * 100);\n    },\n    perNotMapped: function perNotMapped() {\n      return 100 - this.perMapped;\n    },\n    rowsNotMapped: function rowsNotMapped() {\n      return format(this.yearInfo.rows.total - this.yearInfo.rows.mapped);\n    },\n    rowsMapped: function rowsMapped() {\n      return format(this.yearInfo.rows.mapped);\n    },\n    values: function values() {\n      var values = [];\n      var _iterator = _createForOfIteratorHelper(this.yearInfo.values),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var info = _step.value;\n          if (info.name !== 'orcado') {\n            var notMapped = info.total - info.mapped;\n            values.push({\n              name: info.name === 'atualizado' ? 'planejado' : info.name,\n              mapped: {\n                abs: \"R$\".concat(format(info.mapped)),\n                per: Math.round(info.mapped / info.total * 100)\n              },\n              notMapped: {\n                abs: \"R$\".concat(format(notMapped)),\n                per: Math.round(notMapped / info.total * 100)\n              }\n            });\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return values;\n    }\n  }, mapState({\n    yearInfo: function yearInfo(state) {\n      return state.money.yearInfo;\n    },\n    year: function year(state) {\n      return state.route.params.year;\n    }\n  }))\n};","map":{"version":3,"names":["mapState","format","HorBar","LabeledDoughnut","name","components","computed","_objectSpread","perMapped","Math","round","yearInfo","rows","mapped","total","perNotMapped","rowsNotMapped","rowsMapped","values","_iterator","_createForOfIteratorHelper","_step","s","n","done","info","value","notMapped","push","abs","concat","per","err","e","f","state","money","year","route","params"],"sources":["src/components/chart/YearCharts.vue"],"sourcesContent":["<template>\n    <div v-if=\"yearInfo\" class=\"row charts\">\n        <div class=\"col-lg-6 margin-bottom\">\n            <div class=\"inline-block donut-group not-mapped\">\n                <labeled-doughnut :color=\"$assets.patNM\" :percentage=\"perNotMapped\"/>\n                <p class=\"text-secondary-base font-bold text-xl\">{{rowsNotMapped}}</p>\n                <p class=\"text-secondary-base font-bold text-sm\">{{ $t('Not mapped') }}</p>\n            </div>\n            <div class=\"inline-block donut-group mapped\">\n                <labeled-doughnut :color=\"$assets.patM\" :percentage=\"perMapped\"/>\n                <p class=\"text-primary-base font-bold text-xl\">{{rowsMapped}}</p>\n                <p class=\"text-primary-base font-bold text-sm\">{{ $t('Mapped') }}</p>\n            </div>\n        </div>\n\n        <div class=\"col-lg-6 mt-10 hidden\">\n            <div class=\"inline-block values-block\">\n                <div v-for=\"(v, i) of values\" :key=\"i\" class=\"value-block flex justify-center items-center py-5 border-b border-gray-200\">\n                    <div class=\"icon-block text-center \">\n                        <img :src=\"$assets[v.name]\" class=\"w-5\">\n                        <span class=\"capitalize text-center text-neutral-base\">{{ $t(v.name) }}</span>\n                    </div>\n                    <div class=\"bar-block inline-block\">\n                        <hor-bar :color=\"$assets.patNM\"\n                              extraclass=\"not-mapped\"\n                              :title=\"$t('Not mapped')\"\n                              :absolute=\"v.notMapped.abs\"\n                              :percentage=\"v.notMapped.per\"/>\n                        <hor-bar :color=\"$assets.patM\"\n                              extraclass=\"mapped\"\n                              :title=\"$t('Mapped')\"\n                              :absolute=\"v.mapped.abs\"\n                              :percentage=\"v.mapped.per\"/>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\nimport { format } from '@/utils'\nimport HorBar from '@/components/chart/HorBar.vue'\nimport LabeledDoughnut from '@/components/chart/LabeledDoughnut.vue'\n\nexport default {\n  name: 'year-charts',\n  components: {\n    HorBar,\n    LabeledDoughnut\n  },\n  // mounted () {\n  //   this.getYearInfo({ params: { year: this.year } })\n  // },\n  computed: {\n    perMapped () {\n      return Math.round(this.yearInfo.rows.mapped / this.yearInfo.rows.total * 100)\n    },\n    perNotMapped () {\n      return 100 - this.perMapped\n    },\n    rowsNotMapped () {\n      return format(this.yearInfo.rows.total - this.yearInfo.rows.mapped)\n    },\n    rowsMapped () {\n      return format(this.yearInfo.rows.mapped)\n    },\n    values () {\n      let values = []\n      for (let info of this.yearInfo.values) {\n        if (info.name !== 'orcado') {\n          let notMapped = info.total - info.mapped\n          values.push({\n            name: info.name === 'atualizado' ? 'planejado' : info.name,\n            mapped: {\n              abs: `R$${format(info.mapped)}`,\n              per: Math.round(info.mapped / info.total * 100)\n            },\n            notMapped: {\n              abs: `R$${format(notMapped)}`,\n              per: Math.round(notMapped / info.total * 100)\n            }\n          })\n        }\n      }\n      return values\n    },\n    ...mapState({\n      yearInfo: state => state.money.yearInfo,\n      year: state => state.route.params.year\n    })\n  }\n}\n</script>\n\n<style lang=\"scss\">\n  .canvas-wrapper {\n    display: table;\n    font-size: 20pt;\n    height: 200px;\n    width: 200px;\n  }\n  canvas.donut {\n    position: absolute;\n  }\n  .canvas-text {\n    display: table-cell;\n    text-align: center;\n    vertical-align: middle;\n    font-size: 20pt;\n    color: #6c6c6c;\n  }\n  .donut-group {\n    font-weight: 700;\n    width: 200px;\n  }\n</style>"],"mappings":";;;;;;AAyCA,SAAAA,QAAA;AACA,SAAAC,MAAA;AACA,OAAAC,MAAA;AACA,OAAAC,eAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAH,MAAA,EAAAA,MAAA;IACAC,eAAA,EAAAA;EACA;EACA;EACA;EACA;EACAG,QAAA,EAAAC,aAAA;IACAC,SAAA,WAAAA,UAAA;MACA,OAAAC,IAAA,CAAAC,KAAA,MAAAC,QAAA,CAAAC,IAAA,CAAAC,MAAA,QAAAF,QAAA,CAAAC,IAAA,CAAAE,KAAA;IACA;IACAC,YAAA,WAAAA,aAAA;MACA,kBAAAP,SAAA;IACA;IACAQ,aAAA,WAAAA,cAAA;MACA,OAAAf,MAAA,MAAAU,QAAA,CAAAC,IAAA,CAAAE,KAAA,QAAAH,QAAA,CAAAC,IAAA,CAAAC,MAAA;IACA;IACAI,UAAA,WAAAA,WAAA;MACA,OAAAhB,MAAA,MAAAU,QAAA,CAAAC,IAAA,CAAAC,MAAA;IACA;IACAK,MAAA,WAAAA,OAAA;MACA,IAAAA,MAAA;MAAA,IAAAC,SAAA,GAAAC,0BAAA,CACA,KAAAT,QAAA,CAAAO,MAAA;QAAAG,KAAA;MAAA;QAAA,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA;UAAA,IAAAC,IAAA,GAAAJ,KAAA,CAAAK,KAAA;UACA,IAAAD,IAAA,CAAArB,IAAA;YACA,IAAAuB,SAAA,GAAAF,IAAA,CAAAX,KAAA,GAAAW,IAAA,CAAAZ,MAAA;YACAK,MAAA,CAAAU,IAAA;cACAxB,IAAA,EAAAqB,IAAA,CAAArB,IAAA,kCAAAqB,IAAA,CAAArB,IAAA;cACAS,MAAA;gBACAgB,GAAA,OAAAC,MAAA,CAAA7B,MAAA,CAAAwB,IAAA,CAAAZ,MAAA;gBACAkB,GAAA,EAAAtB,IAAA,CAAAC,KAAA,CAAAe,IAAA,CAAAZ,MAAA,GAAAY,IAAA,CAAAX,KAAA;cACA;cACAa,SAAA;gBACAE,GAAA,OAAAC,MAAA,CAAA7B,MAAA,CAAA0B,SAAA;gBACAI,GAAA,EAAAtB,IAAA,CAAAC,KAAA,CAAAiB,SAAA,GAAAF,IAAA,CAAAX,KAAA;cACA;YACA;UACA;QACA;MAAA,SAAAkB,GAAA;QAAAb,SAAA,CAAAc,CAAA,CAAAD,GAAA;MAAA;QAAAb,SAAA,CAAAe,CAAA;MAAA;MACA,OAAAhB,MAAA;IACA;EAAA,GACAlB,QAAA;IACAW,QAAA,WAAAA,SAAAwB,KAAA;MAAA,OAAAA,KAAA,CAAAC,KAAA,CAAAzB,QAAA;IAAA;IACA0B,IAAA,WAAAA,KAAAF,KAAA;MAAA,OAAAA,KAAA,CAAAG,KAAA,CAAAC,MAAA,CAAAF,IAAA;IAAA;EACA;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}